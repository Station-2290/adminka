/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsersRouteImport } from './routes/users'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as OrdersRouteImport } from './routes/orders'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as ApiKeysRouteImport } from './routes/api-keys'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProductsIndexRouteImport } from './routes/products/index'
import { Route as CategoriesIndexRouteImport } from './routes/categories/index'
import { Route as ProductsCreateIndexRouteImport } from './routes/products/create/index'
import { Route as ProductsIdIndexRouteImport } from './routes/products/$id/index'
import { Route as CategoriesCreateIndexRouteImport } from './routes/categories/create/index'
import { Route as CategoriesIdIndexRouteImport } from './routes/categories/$id/index'
import { Route as ProductsIdEditIndexRouteImport } from './routes/products/$id/edit/index'
import { Route as CategoriesIdEditIndexRouteImport } from './routes/categories/$id/edit/index'

const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const OrdersRoute = OrdersRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiKeysRoute = ApiKeysRouteImport.update({
  id: '/api-keys',
  path: '/api-keys',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIndexRoute = ProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRouteImport,
} as any)
const CategoriesIndexRoute = CategoriesIndexRouteImport.update({
  id: '/categories/',
  path: '/categories/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsCreateIndexRoute = ProductsCreateIndexRouteImport.update({
  id: '/products/create/',
  path: '/products/create/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIdIndexRoute = ProductsIdIndexRouteImport.update({
  id: '/products/$id/',
  path: '/products/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const CategoriesCreateIndexRoute = CategoriesCreateIndexRouteImport.update({
  id: '/categories/create/',
  path: '/categories/create/',
  getParentRoute: () => rootRouteImport,
} as any)
const CategoriesIdIndexRoute = CategoriesIdIndexRouteImport.update({
  id: '/categories/$id/',
  path: '/categories/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIdEditIndexRoute = ProductsIdEditIndexRouteImport.update({
  id: '/products/$id/edit/',
  path: '/products/$id/edit/',
  getParentRoute: () => rootRouteImport,
} as any)
const CategoriesIdEditIndexRoute = CategoriesIdEditIndexRouteImport.update({
  id: '/categories/$id/edit/',
  path: '/categories/$id/edit/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/api-keys': typeof ApiKeysRoute
  '/dashboard': typeof DashboardRoute
  '/orders': typeof OrdersRoute
  '/settings': typeof SettingsRoute
  '/users': typeof UsersRoute
  '/categories': typeof CategoriesIndexRoute
  '/products': typeof ProductsIndexRoute
  '/categories/$id': typeof CategoriesIdIndexRoute
  '/categories/create': typeof CategoriesCreateIndexRoute
  '/products/$id': typeof ProductsIdIndexRoute
  '/products/create': typeof ProductsCreateIndexRoute
  '/categories/$id/edit': typeof CategoriesIdEditIndexRoute
  '/products/$id/edit': typeof ProductsIdEditIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api-keys': typeof ApiKeysRoute
  '/dashboard': typeof DashboardRoute
  '/orders': typeof OrdersRoute
  '/settings': typeof SettingsRoute
  '/users': typeof UsersRoute
  '/categories': typeof CategoriesIndexRoute
  '/products': typeof ProductsIndexRoute
  '/categories/$id': typeof CategoriesIdIndexRoute
  '/categories/create': typeof CategoriesCreateIndexRoute
  '/products/$id': typeof ProductsIdIndexRoute
  '/products/create': typeof ProductsCreateIndexRoute
  '/categories/$id/edit': typeof CategoriesIdEditIndexRoute
  '/products/$id/edit': typeof ProductsIdEditIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/api-keys': typeof ApiKeysRoute
  '/dashboard': typeof DashboardRoute
  '/orders': typeof OrdersRoute
  '/settings': typeof SettingsRoute
  '/users': typeof UsersRoute
  '/categories/': typeof CategoriesIndexRoute
  '/products/': typeof ProductsIndexRoute
  '/categories/$id/': typeof CategoriesIdIndexRoute
  '/categories/create/': typeof CategoriesCreateIndexRoute
  '/products/$id/': typeof ProductsIdIndexRoute
  '/products/create/': typeof ProductsCreateIndexRoute
  '/categories/$id/edit/': typeof CategoriesIdEditIndexRoute
  '/products/$id/edit/': typeof ProductsIdEditIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/api-keys'
    | '/dashboard'
    | '/orders'
    | '/settings'
    | '/users'
    | '/categories'
    | '/products'
    | '/categories/$id'
    | '/categories/create'
    | '/products/$id'
    | '/products/create'
    | '/categories/$id/edit'
    | '/products/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/api-keys'
    | '/dashboard'
    | '/orders'
    | '/settings'
    | '/users'
    | '/categories'
    | '/products'
    | '/categories/$id'
    | '/categories/create'
    | '/products/$id'
    | '/products/create'
    | '/categories/$id/edit'
    | '/products/$id/edit'
  id:
    | '__root__'
    | '/'
    | '/api-keys'
    | '/dashboard'
    | '/orders'
    | '/settings'
    | '/users'
    | '/categories/'
    | '/products/'
    | '/categories/$id/'
    | '/categories/create/'
    | '/products/$id/'
    | '/products/create/'
    | '/categories/$id/edit/'
    | '/products/$id/edit/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApiKeysRoute: typeof ApiKeysRoute
  DashboardRoute: typeof DashboardRoute
  OrdersRoute: typeof OrdersRoute
  SettingsRoute: typeof SettingsRoute
  UsersRoute: typeof UsersRoute
  CategoriesIndexRoute: typeof CategoriesIndexRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
  CategoriesIdIndexRoute: typeof CategoriesIdIndexRoute
  CategoriesCreateIndexRoute: typeof CategoriesCreateIndexRoute
  ProductsIdIndexRoute: typeof ProductsIdIndexRoute
  ProductsCreateIndexRoute: typeof ProductsCreateIndexRoute
  CategoriesIdEditIndexRoute: typeof CategoriesIdEditIndexRoute
  ProductsIdEditIndexRoute: typeof ProductsIdEditIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders': {
      id: '/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api-keys': {
      id: '/api-keys'
      path: '/api-keys'
      fullPath: '/api-keys'
      preLoaderRoute: typeof ApiKeysRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/categories/': {
      id: '/categories/'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof CategoriesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/create/': {
      id: '/products/create/'
      path: '/products/create'
      fullPath: '/products/create'
      preLoaderRoute: typeof ProductsCreateIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/$id/': {
      id: '/products/$id/'
      path: '/products/$id'
      fullPath: '/products/$id'
      preLoaderRoute: typeof ProductsIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/categories/create/': {
      id: '/categories/create/'
      path: '/categories/create'
      fullPath: '/categories/create'
      preLoaderRoute: typeof CategoriesCreateIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/categories/$id/': {
      id: '/categories/$id/'
      path: '/categories/$id'
      fullPath: '/categories/$id'
      preLoaderRoute: typeof CategoriesIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/$id/edit/': {
      id: '/products/$id/edit/'
      path: '/products/$id/edit'
      fullPath: '/products/$id/edit'
      preLoaderRoute: typeof ProductsIdEditIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/categories/$id/edit/': {
      id: '/categories/$id/edit/'
      path: '/categories/$id/edit'
      fullPath: '/categories/$id/edit'
      preLoaderRoute: typeof CategoriesIdEditIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiKeysRoute: ApiKeysRoute,
  DashboardRoute: DashboardRoute,
  OrdersRoute: OrdersRoute,
  SettingsRoute: SettingsRoute,
  UsersRoute: UsersRoute,
  CategoriesIndexRoute: CategoriesIndexRoute,
  ProductsIndexRoute: ProductsIndexRoute,
  CategoriesIdIndexRoute: CategoriesIdIndexRoute,
  CategoriesCreateIndexRoute: CategoriesCreateIndexRoute,
  ProductsIdIndexRoute: ProductsIdIndexRoute,
  ProductsCreateIndexRoute: ProductsCreateIndexRoute,
  CategoriesIdEditIndexRoute: CategoriesIdEditIndexRoute,
  ProductsIdEditIndexRoute: ProductsIdEditIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
